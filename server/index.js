const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Create uploads directory if it doesn't exist
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Middleware
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://absolutdee.github.io'] 
    : ['http://localhost:3000'],
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve uploaded files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Static files for production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../build')));
}

// Import routes
const authRoutes = require('./routes/auth');
const trainerRoutes = require('./routes/trainers');
const clientRoutes = require('./routes/clients');
const sessionRoutes = require('./routes/sessions');
const packageRoutes = require('./routes/packages');
const reviewRoutes = require('./routes/reviews');
const articleRoutes = require('./routes/articles');
const eventRoutes = require('./routes/events');
const gymRoutes = require('./routes/gyms');
const uploadRoutes = require('./routes/upload');
const adminRoutes = require('./routes/admin');
const notificationRoutes = require('./routes/notifications');

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    message: 'FitConnect Backend is running!', 
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    version: '1.0.0'
  });
});

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/trainers', trainerRoutes);
app.use('/api/clients', clientRoutes);
app.use('/api/sessions', sessionRoutes);
app.use('/api/packages', packageRoutes);
app.use('/api/reviews', reviewRoutes);
app.use('/api/articles', articleRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/gyms', gymRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/notifications', notificationRoutes);

// Newsletter endpoint
app.post('/api/newsletter/subscribe', (req, res) => {
  const { email, source = 'website' } = req.body;
  
  console.log('üì∞ Newsletter subscription:', {
    email,
    source,
    timestamp: new Date().toISOString()
  });

  // TODO: Save to database
  // For now, just simulate success
  res.json({ 
    success: true, 
    message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!',
    data: { email, subscribed_at: new Date().toISOString() }
  });
});

// Contact form endpoint
app.post('/api/contact', (req, res) => {
  const { name, email, subject, message } = req.body;
  
  console.log('üìß Contact form submission:', {
    name, email, subject, message,
    timestamp: new Date().toISOString()
  });

  // TODO: Send email or save to database
  
  res.json({ 
    success: true, 
    message: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ',
    data: { submitted_at: new Date().toISOString() }
  });
});

// ===============================
// API Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FitConnect
// ===============================

// Trainers API
app.get('/api/trainers', (req, res) => {
  const { search, specialty, location, rating } = req.query;
  
  // Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo
  const mockTrainers = [
    {
      id: 1,
      name: '‡∏à‡∏≠‡∏´‡πå‡∏ô ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô',
      specialty: 'Weight Training',
      location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.8,
      reviews: 125,
      price: 1500,
      image: '/images/trainers/trainer1.jpg',
      featured: true,
      experience: 5,
      certifications: ['ACSM', 'NASM']
    },
    {
      id: 2,
      name: '‡πÄ‡∏à‡∏ô ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™',
      specialty: 'Cardio & HIIT',
      location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      rating: 4.9,
      reviews: 89,
      price: 1200,
      image: '/images/trainers/trainer2.jpg',
      featured: false,
      experience: 3,
      certifications: ['ACE', 'HIIT Certified']
    },
    {
      id: 3,
      name: '‡πÑ‡∏°‡∏Ñ‡πå ‡πÇ‡∏¢‡∏Ñ‡∏∞',
      specialty: 'Yoga & Pilates',
      location: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
      rating: 4.7,
      reviews: 67,
      price: 1000,
      image: '/images/trainers/trainer3.jpg',
      featured: true,
      experience: 7,
      certifications: ['RYT-200', 'Pilates Mat']
    }
  ];

  let filteredTrainers = mockTrainers;

  // Apply filters
  if (search) {
    filteredTrainers = filteredTrainers.filter(trainer => 
      trainer.name.toLowerCase().includes(search.toLowerCase()) ||
      trainer.specialty.toLowerCase().includes(search.toLowerCase())
    );
  }

  if (specialty) {
    filteredTrainers = filteredTrainers.filter(trainer => 
      trainer.specialty.toLowerCase().includes(specialty.toLowerCase())
    );
  }

  if (location) {
    filteredTrainers = filteredTrainers.filter(trainer => 
      trainer.location.toLowerCase().includes(location.toLowerCase())
    );
  }

  if (rating) {
    filteredTrainers = filteredTrainers.filter(trainer => 
      trainer.rating >= parseFloat(rating)
    );
  }

  res.json({ 
    trainers: filteredTrainers,
    total: filteredTrainers.length,
    page: 1,
    limit: 10
  });
});

// Get single trainer
app.get('/api/trainers/:id', (req, res) => {
  const trainerId = parseInt(req.params.id);
  
  // Mock trainer detail
  const trainerDetail = {
    id: trainerId,
    name: '‡∏à‡∏≠‡∏´‡πå‡∏ô ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô',
    specialty: 'Weight Training & Muscle Building',
    location: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
    rating: 4.8,
    reviews: 125,
    price: 1500,
    image: '/images/trainers/trainer1.jpg',
    gallery: [
      '/images/trainers/trainer1-1.jpg',
      '/images/trainers/trainer1-2.jpg',
      '/images/trainers/trainer1-3.jpg'
    ],
    bio: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
    experience: 5,
    certifications: ['ACSM', 'NASM', 'Nutrition Specialist'],
    packages: [
      {
        id: 1,
        name: 'Basic Package',
        sessions: 8,
        duration: '1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        price: 12000,
        features: ['8 ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô'],
        recommended: false
      },
      {
        id: 2,
        name: 'Premium Package',
        sessions: 16,
        duration: '2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        price: 20000,
        features: ['16 ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡πÅ‡∏ú‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£', '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° 24/7'],
        recommended: true
      },
      {
        id: 3,
        name: 'VIP Package',
        sessions: 24,
        duration: '3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        price: 30000,
        features: ['24 ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡πÅ‡∏ú‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£', '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° 24/7', '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏û‡∏¥‡πÄ‡∏®‡∏©'],
        recommended: false
      }
    ],
    schedule: {
      monday: ['09:00-11:00', '14:00-16:00', '18:00-20:00'],
      tuesday: ['09:00-11:00', '14:00-16:00'],
      wednesday: ['09:00-11:00', '14:00-16:00', '18:00-20:00'],
      thursday: ['09:00-11:00', '14:00-16:00'],
      friday: ['09:00-11:00', '18:00-20:00'],
      saturday: ['09:00-12:00'],
      sunday: ['‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î']
    }
  };

  res.json(trainerDetail);
});

// Customers API
app.get('/api/customers', (req, res) => {
  res.json({ 
    customers: [],
    message: 'Customer endpoints coming soon'
  });
});

// Gyms API
app.get('/api/gyms', (req, res) => {
  const mockGyms = [
    {
      id: 1,
      name: 'Fitness First',
      location: '‡∏™‡∏≤‡∏ó‡∏£, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      rating: 4.5,
      image: '/images/gyms/gym1.jpg',
      facilities: ['Weight Training', 'Cardio', 'Group Classes']
    },
    {
      id: 2,
      name: 'Virgin Active',
      location: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
      rating: 4.7,
      image: '/images/gyms/gym2.jpg',
      facilities: ['Swimming Pool', 'Spa', 'Personal Training']
    }
  ];

  res.json({ gyms: mockGyms });
});

// Articles API
app.get('/api/articles', (req, res) => {
  const mockArticles = [
    {
      id: 1,
      title: '5 ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
      excerpt: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
      image: '/images/articles/article1.jpg',
      author: '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô FitConnect',
      publishDate: '2024-01-15',
      category: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'
    },
    {
      id: 2,
      title: '‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤',
      excerpt: '‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
      image: '/images/articles/article2.jpg',
      author: '‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡∏≠‡∏±‡∏ô‡∏î‡∏≤',
      publishDate: '2024-01-10',
      category: '‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£'
    }
  ];

  res.json({ articles: mockArticles });
});

// Events API
app.get('/api/events', (req, res) => {
  const mockEvents = [
    {
      id: 1,
      title: 'Marathon Bangkok 2024',
      date: '2024-02-15',
      location: '‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ ‡∏û‡∏≤‡∏£‡πå‡∏Ñ',
      image: '/images/events/event1.jpg',
      description: '‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏£‡∏≤‡∏ò‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2024'
    }
  ];

  res.json({ events: mockEvents });
});

// Contact API
app.post('/api/contact', (req, res) => {
  const { name, email, subject, message } = req.body;
  
  console.log('üìß Contact form submission:', {
    name, email, subject, message,
    timestamp: new Date().toISOString()
  });

  // TODO: Send email or save to database
  
  res.json({ 
    success: true, 
    message: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ' 
  });
});

// Newsletter subscription
app.post('/api/newsletter', (req, res) => {
  const { email } = req.body;
  
  console.log('üì∞ Newsletter subscription:', email);
  
  // TODO: Add to newsletter database
  
  res.json({ 
    success: true, 
    message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!' 
  });
});

// ===============================
// Error handling
// ===============================
app.use((req, res, next) => {
  res.status(404).json({ 
    error: 'Endpoint not found',
    path: req.path,
    method: req.method
  });
});

app.use((err, req, res, next) => {
  console.error('‚ùå Server Error:', err.stack);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong!'
  });
});

// Serve React app for production
if (process.env.NODE_ENV === 'production') {
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../build/index.html'));
  });
}

// Start server
const server = app.listen(PORT, '127.0.0.1', () => {
  console.log(`üöÄ FitConnect Server running on http://localhost:${PORT}`);
  console.log(`üéØ Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìù API Documentation: http://localhost:${PORT}/api/health`);
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
});

// Handle server errors
server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log(`‚ùå Port ${PORT} is already in use`);
    console.log(`üí° Try running: npx kill-port ${PORT}`);
    process.exit(1);
  } else {
    console.error('‚ùå Server error:', err);
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üëã SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('üí§ Process terminated');
  });
});

module.exports = app;